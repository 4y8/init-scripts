#!/bin/sh
########################################################################
# Begin /sbin/ifup
#
# Description : Interface Up
#
# Authors     : Nathan Coulson - nathan@linuxfromscratch.org
#               Kevin P. Fleming - kpfleming@linuxfromscratch.org
# Update      : Bruce Dubbs - bdubbs@linuxfromscratch.org
#               DJ Lucas - dj@linuxfromscratch.org
# 
# Modified    : yul3n for kara linux
#
# Version     : LFS 7.7
#
# Notes       : The IFCONFIG variable is passed to the SERVICE script
#               in the /lib/services directory, to indicate what file the
#               service should source to get interface specifications.
#
########################################################################

isdigit() {
    case $1 in
	^[0-9]+$) return 1
		  ;;
	*) return 0
	   ;;
    esac
}

up() {
  log_info_msg "Bringing up the $1 interface..."

  if ip link show "$1" > /dev/null 2>&1; then
     link_status=$(ip link show "$1")

     if [ -n "$link_status" ]; then
        if ! echo "$link_status" | grep -q UP; then
           ip link set "$1" up
        fi
     fi

  else
     log_failure_msg "Interface ${IFACE} doesn't exist."
     exit 1
  fi

  evaluate_retval
}

RELEASE="7.7"

USAGE="Usage: $0 [ -hV ] [--help] [--version] interface"
VERSTR="LFS ifup, version $RELEASE"

while [ $# -gt 0 ]; do
   case "$1" in
      --help | -h)     help="y"; break ;;

      --version | -V)  echo "$VERSTR"; exit 0 ;;
   
      -*)              echo "ifup: $1: invalid option" >&2
                       echo "$USAGE" >& 2
                       exit 2 ;;
                       
      *)               break ;;
   esac
done

[ -n "$help" ] && {
   echo "$VERSTR"
   echo "$USAGE"
   echo
   cat << HERE_EOF
ifup is used to bring up a network interface.  The interface
parameter, e.g. eth0 or eth0:2, must match the trailing part of the
interface specifications file, e.g. /etc/sysconfig/ifconfig.eth0:2.

HERE_EOF
   exit 0
}

file=/etc/sysconfig/ifconfig."$1"

# Skip backup files
[ "$file" = "${file%""~""}" ] || exit 0

. /lib/lsb/init-functions

[ ! -r "$file" ] && {
   log_failure_msg "Unable to bring up $1 interface! $file is missing or cannot be accessed."
   exit 1
}

#shellcheck disable=SC1090
.  "$file"

[ "$IFACE" = "" ] && {
   log_failure_msg "Unable to bring up ${1} interface! ${file} does not define an interface [IFACE]."
   exit 1
}

# Do not process this service if started by boot, and ONBOOT
# is not set to yes
[ "${IN_BOOT}" = "1" ] && [ "${ONBOOT}" != "yes" ] && exit 0

# Bring up the interface
[ "$VIRTINT" != "yes" ] && up "$IFACE"

for S in ${SERVICE}; do
  if [ ! -x "/lib/services/$S" ]; then
    MSG="\nUnable to process $file.  Either " 
    MSG="${MSG}the SERVICE '$S was not present "
    MSG="${MSG}or cannot be executed."
    log_failure_msg "$MSG"
    exit 1
  fi
done

[ "$SERVICE" = "wpa" ] && log_success_msg

# Create/configure the interface
for S in ${SERVICE}; do 
  IFCONFIG=$file "/lib/services/$S" "$IFACE" up
done

# Set link up virtual interfaces
[ "$VIRTINT" = "yes" ] && up "$IFACE"

# Bring up any additional interface components
for I in $INTERFACE_COMPONENTS; do up "$I"; done

# Set MTU if requested. Check if MTU has a "good" value.
[ -n "$MTU" ] && {
    if isdigit 1 && [ "$MTU" -ge 68 ] ; then
      for I in $IFACE $INTERFACE_COMPONENTS; do 
         ip link set dev "$I" mtu "$MTU"; 
      done
   else
      log_info_msg2 "Invalid MTU $MTU"
   fi
}

# Set the route default gateway if requested
[ -n "$GATEWAY" ] && {
   if ip route | grep -q default; then
      log_warning_msg "Gateway already setup; skipping."
   else
      log_info_msg "Adding default gateway ${GATEWAY} to the ${IFACE} interface..."
      ip route add default via "$GATEWAY" dev "$IFACE"
      evaluate_retval
   fi
}

# End /sbin/ifup
